#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Todo::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Give the todo.txt file to work with'
default_value '~/.todo.txt'
arg_name 'filename'
flag [:f,:file]

desc 'Add a new task'
arg_name 'Text to make into a todo item'
command :add do |c|
  c.desc 'Assign a priority (A-Z)'
  c.arg_name 'priority'
  c.flag [:p,:priority]
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    task_list = Todo::TaskList.new(global_options[:file])
    task = Todo::Task.new(args[0])
    task.priority = options[:p] if options[:p]
    task_list.add(task)

    puts "Task added"
  end
end

desc 'List your tasks'
arg_name 'Optional filter'
command :ls do |c|
  c.action do |global_options,options,args|
    task_list = Todo::TaskList.new(global_options[:file])
    puts task_list.to_s
    puts "Complete: #{task_list.completed_tasks.length} tasks"
    puts "Incomplete: #{task_list.incomplete_tasks.length} tasks"
  end
end

desc 'Mark a task as complete'
arg_name 'task number'
command :done do |c|
  c.action do |global_options,options,args|
    task_list = Todo::TaskList.new(global_options[:file])
    task_list.complete(args[0])

    puts "Task completed"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  if !File.exist?(global[:file])
    FileUtils.touch(global[:file])
  else
    true
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
